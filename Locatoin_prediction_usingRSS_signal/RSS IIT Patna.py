{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "37949bf3-1841-443c-9f78-0719469d85be",
   "metadata": {},
   "source": [
    "## Prediction of Target Location using RSS Signals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "921b1453-cf75-4425-9550-4c228652bc1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "35205552-4595-4a36-9933-6bf95593835e",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal = pd.read_excel(\"first.train.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3d78569b-aac1-4fd5-88ef-caa3061755a4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP618</th>\n",
       "      <th>WAP619</th>\n",
       "      <th>WAP620</th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>f</th>\n",
       "      <th>Labels</th>\n",
       "      <th>Actual_labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-90</td>\n",
       "      <td>-62</td>\n",
       "      <td>-69</td>\n",
       "      <td>-87</td>\n",
       "      <td>-85</td>\n",
       "      <td>-87</td>\n",
       "      <td>-68</td>\n",
       "      <td>-86</td>\n",
       "      <td>-63</td>\n",
       "      <td>-85</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>101100101</td>\n",
       "      <td>20160602155217200</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>29.216544</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-93</td>\n",
       "      <td>-65</td>\n",
       "      <td>-67</td>\n",
       "      <td>-85</td>\n",
       "      <td>-88</td>\n",
       "      <td>-87</td>\n",
       "      <td>-67</td>\n",
       "      <td>-86</td>\n",
       "      <td>-66</td>\n",
       "      <td>-88</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>101100102</td>\n",
       "      <td>20160602155220700</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>29.216544</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-88</td>\n",
       "      <td>-64</td>\n",
       "      <td>-68</td>\n",
       "      <td>-88</td>\n",
       "      <td>-86</td>\n",
       "      <td>-90</td>\n",
       "      <td>-68</td>\n",
       "      <td>-88</td>\n",
       "      <td>-66</td>\n",
       "      <td>-86</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>101100103</td>\n",
       "      <td>20160602155224300</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>29.216544</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-90</td>\n",
       "      <td>-63</td>\n",
       "      <td>-66</td>\n",
       "      <td>-87</td>\n",
       "      <td>-88</td>\n",
       "      <td>-91</td>\n",
       "      <td>-67</td>\n",
       "      <td>-86</td>\n",
       "      <td>-64</td>\n",
       "      <td>-85</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>101100104</td>\n",
       "      <td>20160602155227800</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>29.216544</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100</td>\n",
       "      <td>-64</td>\n",
       "      <td>-68</td>\n",
       "      <td>-88</td>\n",
       "      <td>100</td>\n",
       "      <td>-88</td>\n",
       "      <td>-66</td>\n",
       "      <td>-88</td>\n",
       "      <td>-63</td>\n",
       "      <td>-86</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>101100105</td>\n",
       "      <td>20160602155231300</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>29.216544</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 627 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   WAP001  WAP002  WAP003  WAP004  WAP005  WAP006  WAP007  WAP008  WAP009  \\\n",
       "0     -90     -62     -69     -87     -85     -87     -68     -86     -63   \n",
       "1     -93     -65     -67     -85     -88     -87     -67     -86     -66   \n",
       "2     -88     -64     -68     -88     -86     -90     -68     -88     -66   \n",
       "3     -90     -63     -66     -87     -88     -91     -67     -86     -64   \n",
       "4     100     -64     -68     -88     100     -88     -66     -88     -63   \n",
       "\n",
       "   WAP010  ...  WAP618  WAP619  WAP620         id          timestamp  \\\n",
       "0     -85  ...     100     100     100  101100101  20160602155217200   \n",
       "1     -88  ...     100     100     100  101100102  20160602155220700   \n",
       "2     -86  ...     100     100     100  101100103  20160602155224300   \n",
       "3     -85  ...     100     100     100  101100104  20160602155227800   \n",
       "4     -86  ...     100     100     100  101100105  20160602155231300   \n",
       "\n",
       "           x          y  f  Labels  Actual_labels  \n",
       "0  12.913852  29.216544  3       3              2  \n",
       "1  12.913852  29.216544  3       3              2  \n",
       "2  12.913852  29.216544  3       3              2  \n",
       "3  12.913852  29.216544  3       3              2  \n",
       "4  12.913852  29.216544  3       3              2  \n",
       "\n",
       "[5 rows x 627 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.head() #will show top 5 rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7df4f183-6c43-4226-b4df-46506d32d60d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8640 entries, 0 to 8639\n",
      "Columns: 627 entries, WAP001 to Actual_labels\n",
      "dtypes: float64(2), int64(625)\n",
      "memory usage: 41.3 MB\n"
     ]
    }
   ],
   "source": [
    "signal.info() #will give details of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0e9d4ef5-0817-4b34-b14b-5935d1a89511",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WAP620\n",
       "100    8640\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal['WAP620'].value_counts() #give details about the term"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "35a8cb7e-7b83-43e0-af6b-78ce73a7fb34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP618</th>\n",
       "      <th>WAP619</th>\n",
       "      <th>WAP620</th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>f</th>\n",
       "      <th>Labels</th>\n",
       "      <th>Actual_labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8.640000e+03</td>\n",
       "      <td>8.640000e+03</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-7.038310</td>\n",
       "      <td>-3.175926</td>\n",
       "      <td>2.209722</td>\n",
       "      <td>10.110880</td>\n",
       "      <td>59.010764</td>\n",
       "      <td>-7.260532</td>\n",
       "      <td>4.066088</td>\n",
       "      <td>8.981134</td>\n",
       "      <td>10.331944</td>\n",
       "      <td>58.375926</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.081049e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>8.524312</td>\n",
       "      <td>22.949487</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>24.514583</td>\n",
       "      <td>23.514583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>89.807832</td>\n",
       "      <td>88.172132</td>\n",
       "      <td>88.163900</td>\n",
       "      <td>91.235399</td>\n",
       "      <td>77.150028</td>\n",
       "      <td>89.780622</td>\n",
       "      <td>88.206010</td>\n",
       "      <td>91.256607</td>\n",
       "      <td>90.218637</td>\n",
       "      <td>77.588284</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.320745e+06</td>\n",
       "      <td>6.685720e+09</td>\n",
       "      <td>3.584252</td>\n",
       "      <td>4.097289</td>\n",
       "      <td>1.000058</td>\n",
       "      <td>13.842608</td>\n",
       "      <td>13.842608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-98.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-98.000000</td>\n",
       "      <td>-96.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.011001e+08</td>\n",
       "      <td>2.016060e+16</td>\n",
       "      <td>4.134772</td>\n",
       "      <td>16.699815</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-85.000000</td>\n",
       "      <td>-82.000000</td>\n",
       "      <td>-80.000000</td>\n",
       "      <td>-83.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>-85.000000</td>\n",
       "      <td>-79.000000</td>\n",
       "      <td>-83.000000</td>\n",
       "      <td>-82.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.041073e+08</td>\n",
       "      <td>2.016061e+16</td>\n",
       "      <td>4.134772</td>\n",
       "      <td>18.487919</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-75.000000</td>\n",
       "      <td>-64.000000</td>\n",
       "      <td>-62.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>-75.000000</td>\n",
       "      <td>-61.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.081049e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>8.524312</td>\n",
       "      <td>22.064128</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>24.500000</td>\n",
       "      <td>23.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.121024e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>25.640336</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>36.250000</td>\n",
       "      <td>35.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.151096e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>12.913852</td>\n",
       "      <td>29.216544</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>47.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 627 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            WAP001       WAP002       WAP003       WAP004       WAP005  \\\n",
       "count  8640.000000  8640.000000  8640.000000  8640.000000  8640.000000   \n",
       "mean     -7.038310    -3.175926     2.209722    10.110880    59.010764   \n",
       "std      89.807832    88.172132    88.163900    91.235399    77.150028   \n",
       "min     -97.000000   -97.000000   -95.000000   -95.000000   -97.000000   \n",
       "25%     -85.000000   -82.000000   -80.000000   -83.000000   100.000000   \n",
       "50%     -75.000000   -64.000000   -62.000000   100.000000   100.000000   \n",
       "75%     100.000000   100.000000   100.000000   100.000000   100.000000   \n",
       "max     100.000000   100.000000   100.000000   100.000000   100.000000   \n",
       "\n",
       "            WAP006       WAP007       WAP008       WAP009       WAP010  ...  \\\n",
       "count  8640.000000  8640.000000  8640.000000  8640.000000  8640.000000  ...   \n",
       "mean     -7.260532     4.066088     8.981134    10.331944    58.375926  ...   \n",
       "std      89.780622    88.206010    91.256607    90.218637    77.588284  ...   \n",
       "min     -98.000000   -95.000000   -95.000000   -98.000000   -96.000000  ...   \n",
       "25%     -85.000000   -79.000000   -83.000000   -82.000000   100.000000  ...   \n",
       "50%     -75.000000   -61.000000   100.000000   100.000000   100.000000  ...   \n",
       "75%     100.000000   100.000000   100.000000   100.000000   100.000000  ...   \n",
       "max     100.000000   100.000000   100.000000   100.000000   100.000000  ...   \n",
       "\n",
       "       WAP618  WAP619  WAP620            id     timestamp            x  \\\n",
       "count  8640.0  8640.0  8640.0  8.640000e+03  8.640000e+03  8640.000000   \n",
       "mean    100.0   100.0   100.0  1.081049e+08  2.016062e+16     8.524312   \n",
       "std       0.0     0.0     0.0  4.320745e+06  6.685720e+09     3.584252   \n",
       "min     100.0   100.0   100.0  1.011001e+08  2.016060e+16     4.134772   \n",
       "25%     100.0   100.0   100.0  1.041073e+08  2.016061e+16     4.134772   \n",
       "50%     100.0   100.0   100.0  1.081049e+08  2.016062e+16     8.524312   \n",
       "75%     100.0   100.0   100.0  1.121024e+08  2.016062e+16    12.913852   \n",
       "max     100.0   100.0   100.0  1.151096e+08  2.016062e+16    12.913852   \n",
       "\n",
       "                 y            f       Labels  Actual_labels  \n",
       "count  8640.000000  8640.000000  8640.000000    8640.000000  \n",
       "mean     22.949487     4.000000    24.514583      23.514583  \n",
       "std       4.097289     1.000058    13.842608      13.842608  \n",
       "min      16.699815     3.000000     1.000000       0.000000  \n",
       "25%      18.487919     3.000000    13.000000      12.000000  \n",
       "50%      22.064128     4.000000    24.500000      23.500000  \n",
       "75%      25.640336     5.000000    36.250000      35.250000  \n",
       "max      29.216544     5.000000    48.000000      47.000000  \n",
       "\n",
       "[8 rows x 627 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "941d8e98-1d44-4fea-8c64-ad2930f8d710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8640, 627)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ba22e56f-af7c-47b0-9c47-72113f53950c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3752eb73-74b8-419d-9ad3-17a05a21ff55",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as plt\n",
    "# signal.hist(bins = 50, figsize=(20, 15))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35edc240-0182-4b15-88bf-1a67af9bcba9",
   "metadata": {},
   "source": [
    "## Pair Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9be3d5a3-7014-44a1-960a-18d935dd6ba1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b157b836-b524-490a-8e05-672cde2afd62",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.pairplot(signal, hue = \"TARGET CLASS\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6437c62d-0126-4820-8c24-7ae6ed4866c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "strat_train_set = signal.copy() #copying everything to strat_train_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "92ec9f10-7978-4305-99d6-800151f29f05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8640, 627)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strat_train_set.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4faab1df-5438-4fde-81c4-e71404e7730c",
   "metadata": {},
   "source": [
    "## Looking for Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "77d75593-0ef8-4060-8ec3-d8c9e9a2c043",
   "metadata": {},
   "outputs": [],
   "source": [
    "# corr_matrix = signal.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dc6b5f9f-0216-47c2-9adf-b02e535f49c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# corr_matrix['x'].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a381f43c-eb76-47ec-836f-cd5098b07dc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# corr_matrix['y'].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b4229c13-4884-40ee-aba4-4842bb5ce319",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from pandas.plotting import scatter_matrix\n",
    "# attributes = [\"y\", \"WAP018\", \"x\", \"WAP620\"]\n",
    "# scatter_matrix(signal[attributes], figsize = (12, 8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3ed5010f-a160-4f3d-841c-18628ae16d7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# signal.plot(kind = \"scatter\", x = \"x\", y = \"y\", alpha = 0.8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "772ba70e-a363-4313-b694-a09c03b85c99",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal = strat_train_set.drop(['x', 'y'], axis = 1) #dropping a column 'x' from data frame\n",
    "signal_labels = strat_train_set[['x', 'y']].copy() #selecting only column 'x' from data frame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edec8dee-bc40-42e4-affd-8201d50c40df",
   "metadata": {},
   "source": [
    "## Removing Some Attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a4680723-6535-494b-9aaf-86189c4b0ba4",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal = signal.drop(\"Labels\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7e45898f-3fc4-45e0-97c6-9b1bebde8352",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8640, 624)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fcb9eedb-4c76-437b-a227-269fcb009ada",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal = signal.drop(\"Actual_labels\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bb639687-fc6c-46de-bf3d-8dbee149c67f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8640, 623)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "715db777-2a49-4759-842e-fa40d0d237ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP614</th>\n",
       "      <th>WAP615</th>\n",
       "      <th>WAP616</th>\n",
       "      <th>WAP617</th>\n",
       "      <th>WAP618</th>\n",
       "      <th>WAP619</th>\n",
       "      <th>WAP620</th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8.640000e+03</td>\n",
       "      <td>8.640000e+03</td>\n",
       "      <td>8640.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-7.038310</td>\n",
       "      <td>-3.175926</td>\n",
       "      <td>2.209722</td>\n",
       "      <td>10.110880</td>\n",
       "      <td>59.010764</td>\n",
       "      <td>-7.260532</td>\n",
       "      <td>4.066088</td>\n",
       "      <td>8.981134</td>\n",
       "      <td>10.331944</td>\n",
       "      <td>58.375926</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.081049e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>89.807832</td>\n",
       "      <td>88.172132</td>\n",
       "      <td>88.163900</td>\n",
       "      <td>91.235399</td>\n",
       "      <td>77.150028</td>\n",
       "      <td>89.780622</td>\n",
       "      <td>88.206010</td>\n",
       "      <td>91.256607</td>\n",
       "      <td>90.218637</td>\n",
       "      <td>77.588284</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.320745e+06</td>\n",
       "      <td>6.685720e+09</td>\n",
       "      <td>1.000058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-98.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-98.000000</td>\n",
       "      <td>-96.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.011001e+08</td>\n",
       "      <td>2.016060e+16</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-85.000000</td>\n",
       "      <td>-82.000000</td>\n",
       "      <td>-80.000000</td>\n",
       "      <td>-83.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>-85.000000</td>\n",
       "      <td>-79.000000</td>\n",
       "      <td>-83.000000</td>\n",
       "      <td>-82.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.041073e+08</td>\n",
       "      <td>2.016061e+16</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-75.000000</td>\n",
       "      <td>-64.000000</td>\n",
       "      <td>-62.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>-75.000000</td>\n",
       "      <td>-61.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.081049e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.121024e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.151096e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 623 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            WAP001       WAP002       WAP003       WAP004       WAP005  \\\n",
       "count  8640.000000  8640.000000  8640.000000  8640.000000  8640.000000   \n",
       "mean     -7.038310    -3.175926     2.209722    10.110880    59.010764   \n",
       "std      89.807832    88.172132    88.163900    91.235399    77.150028   \n",
       "min     -97.000000   -97.000000   -95.000000   -95.000000   -97.000000   \n",
       "25%     -85.000000   -82.000000   -80.000000   -83.000000   100.000000   \n",
       "50%     -75.000000   -64.000000   -62.000000   100.000000   100.000000   \n",
       "75%     100.000000   100.000000   100.000000   100.000000   100.000000   \n",
       "max     100.000000   100.000000   100.000000   100.000000   100.000000   \n",
       "\n",
       "            WAP006       WAP007       WAP008       WAP009       WAP010  ...  \\\n",
       "count  8640.000000  8640.000000  8640.000000  8640.000000  8640.000000  ...   \n",
       "mean     -7.260532     4.066088     8.981134    10.331944    58.375926  ...   \n",
       "std      89.780622    88.206010    91.256607    90.218637    77.588284  ...   \n",
       "min     -98.000000   -95.000000   -95.000000   -98.000000   -96.000000  ...   \n",
       "25%     -85.000000   -79.000000   -83.000000   -82.000000   100.000000  ...   \n",
       "50%     -75.000000   -61.000000   100.000000   100.000000   100.000000  ...   \n",
       "75%     100.000000   100.000000   100.000000   100.000000   100.000000  ...   \n",
       "max     100.000000   100.000000   100.000000   100.000000   100.000000  ...   \n",
       "\n",
       "       WAP614  WAP615  WAP616  WAP617  WAP618  WAP619  WAP620            id  \\\n",
       "count  8640.0  8640.0  8640.0  8640.0  8640.0  8640.0  8640.0  8.640000e+03   \n",
       "mean    100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.081049e+08   \n",
       "std       0.0     0.0     0.0     0.0     0.0     0.0     0.0  4.320745e+06   \n",
       "min     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.011001e+08   \n",
       "25%     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.041073e+08   \n",
       "50%     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.081049e+08   \n",
       "75%     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.121024e+08   \n",
       "max     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.151096e+08   \n",
       "\n",
       "          timestamp            f  \n",
       "count  8.640000e+03  8640.000000  \n",
       "mean   2.016062e+16     4.000000  \n",
       "std    6.685720e+09     1.000058  \n",
       "min    2.016060e+16     3.000000  \n",
       "25%    2.016061e+16     3.000000  \n",
       "50%    2.016062e+16     4.000000  \n",
       "75%    2.016062e+16     5.000000  \n",
       "max    2.016062e+16     5.000000  \n",
       "\n",
       "[8 rows x 623 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "423b7e7f-05e3-4c2e-ac42-7a5f329f42b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal.rename(columns = {'f': 'Floor Number'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "167be90d-2179-4fae-b0cf-664c61ebba34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP614</th>\n",
       "      <th>WAP615</th>\n",
       "      <th>WAP616</th>\n",
       "      <th>WAP617</th>\n",
       "      <th>WAP618</th>\n",
       "      <th>WAP619</th>\n",
       "      <th>WAP620</th>\n",
       "      <th>id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>Floor Number</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>8640.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8640.0</td>\n",
       "      <td>8.640000e+03</td>\n",
       "      <td>8.640000e+03</td>\n",
       "      <td>8640.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-7.038310</td>\n",
       "      <td>-3.175926</td>\n",
       "      <td>2.209722</td>\n",
       "      <td>10.110880</td>\n",
       "      <td>59.010764</td>\n",
       "      <td>-7.260532</td>\n",
       "      <td>4.066088</td>\n",
       "      <td>8.981134</td>\n",
       "      <td>10.331944</td>\n",
       "      <td>58.375926</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.081049e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>89.807832</td>\n",
       "      <td>88.172132</td>\n",
       "      <td>88.163900</td>\n",
       "      <td>91.235399</td>\n",
       "      <td>77.150028</td>\n",
       "      <td>89.780622</td>\n",
       "      <td>88.206010</td>\n",
       "      <td>91.256607</td>\n",
       "      <td>90.218637</td>\n",
       "      <td>77.588284</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.320745e+06</td>\n",
       "      <td>6.685720e+09</td>\n",
       "      <td>1.000058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-97.000000</td>\n",
       "      <td>-98.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-95.000000</td>\n",
       "      <td>-98.000000</td>\n",
       "      <td>-96.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.011001e+08</td>\n",
       "      <td>2.016060e+16</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-85.000000</td>\n",
       "      <td>-82.000000</td>\n",
       "      <td>-80.000000</td>\n",
       "      <td>-83.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>-85.000000</td>\n",
       "      <td>-79.000000</td>\n",
       "      <td>-83.000000</td>\n",
       "      <td>-82.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.041073e+08</td>\n",
       "      <td>2.016061e+16</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-75.000000</td>\n",
       "      <td>-64.000000</td>\n",
       "      <td>-62.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>-75.000000</td>\n",
       "      <td>-61.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.081049e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.121024e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.151096e+08</td>\n",
       "      <td>2.016062e+16</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 623 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            WAP001       WAP002       WAP003       WAP004       WAP005  \\\n",
       "count  8640.000000  8640.000000  8640.000000  8640.000000  8640.000000   \n",
       "mean     -7.038310    -3.175926     2.209722    10.110880    59.010764   \n",
       "std      89.807832    88.172132    88.163900    91.235399    77.150028   \n",
       "min     -97.000000   -97.000000   -95.000000   -95.000000   -97.000000   \n",
       "25%     -85.000000   -82.000000   -80.000000   -83.000000   100.000000   \n",
       "50%     -75.000000   -64.000000   -62.000000   100.000000   100.000000   \n",
       "75%     100.000000   100.000000   100.000000   100.000000   100.000000   \n",
       "max     100.000000   100.000000   100.000000   100.000000   100.000000   \n",
       "\n",
       "            WAP006       WAP007       WAP008       WAP009       WAP010  ...  \\\n",
       "count  8640.000000  8640.000000  8640.000000  8640.000000  8640.000000  ...   \n",
       "mean     -7.260532     4.066088     8.981134    10.331944    58.375926  ...   \n",
       "std      89.780622    88.206010    91.256607    90.218637    77.588284  ...   \n",
       "min     -98.000000   -95.000000   -95.000000   -98.000000   -96.000000  ...   \n",
       "25%     -85.000000   -79.000000   -83.000000   -82.000000   100.000000  ...   \n",
       "50%     -75.000000   -61.000000   100.000000   100.000000   100.000000  ...   \n",
       "75%     100.000000   100.000000   100.000000   100.000000   100.000000  ...   \n",
       "max     100.000000   100.000000   100.000000   100.000000   100.000000  ...   \n",
       "\n",
       "       WAP614  WAP615  WAP616  WAP617  WAP618  WAP619  WAP620            id  \\\n",
       "count  8640.0  8640.0  8640.0  8640.0  8640.0  8640.0  8640.0  8.640000e+03   \n",
       "mean    100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.081049e+08   \n",
       "std       0.0     0.0     0.0     0.0     0.0     0.0     0.0  4.320745e+06   \n",
       "min     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.011001e+08   \n",
       "25%     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.041073e+08   \n",
       "50%     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.081049e+08   \n",
       "75%     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.121024e+08   \n",
       "max     100.0   100.0   100.0   100.0   100.0   100.0   100.0  1.151096e+08   \n",
       "\n",
       "          timestamp  Floor Number  \n",
       "count  8.640000e+03   8640.000000  \n",
       "mean   2.016062e+16      4.000000  \n",
       "std    6.685720e+09      1.000058  \n",
       "min    2.016060e+16      3.000000  \n",
       "25%    2.016061e+16      3.000000  \n",
       "50%    2.016062e+16      4.000000  \n",
       "75%    2.016062e+16      5.000000  \n",
       "max    2.016062e+16      5.000000  \n",
       "\n",
       "[8 rows x 623 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f18b19b-265c-46cb-a8c5-d79129284594",
   "metadata": {},
   "source": [
    "## Creating a Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f1f642ec-6723-4495-b7a7-54f478a09e19",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "my_pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy = \"median\")),\n",
    "    # ... import as many as we want in our pipeline\n",
    "    ('std_scaler', StandardScaler()),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "30c01502-6771-40b3-bb07-118335b9ce5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_num_tr = my_pipeline.fit_transform(signal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4cef422d-08d3-43be-8109-33c76f9a3e20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.92382245, -0.66718902, -0.8077438 , ..., -1.62128483,\n",
       "        -2.00280504, -1.        ],\n",
       "       [-0.95722904, -0.70121535, -0.78505746, ..., -1.6212846 ,\n",
       "        -2.00280452, -1.        ],\n",
       "       [-0.90155138, -0.68987324, -0.79640063, ..., -1.62128437,\n",
       "        -2.00280398, -1.        ],\n",
       "       ...,\n",
       "       [-0.81246714, -0.86000486, -0.97789131, ...,  1.62128437,\n",
       "         0.99635748,  1.        ],\n",
       "       [-0.79019608, -0.84866276, -0.95520498, ...,  1.6212846 ,\n",
       "         0.99635813,  1.        ],\n",
       "       [-0.76792502, -0.84866276, -1.01192081, ...,  1.62128483,\n",
       "         0.99635878,  1.        ]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal_num_tr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e22169fa-ca16-4679-ba88-1a9a1b4838d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8640, 623)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal_num_tr.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "843a7718-2c8b-4893-8a69-e7b5f499c7dd",
   "metadata": {},
   "source": [
    "## Selecting a Desired Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1af8b61f-991c-4ea5-9483-00bda99b18d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "# model = LinearRegression()\n",
    "# model = DecisionTreeRegressor()\n",
    "model = RandomForestRegressor()\n",
    "model.fit(signal_num_tr, signal_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "afc6619b-482a-45ef-a8d3-7596539d66a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "some_data = signal.iloc[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c59465b9-e1b1-423e-bca5-712f89a154cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "some_labels = signal_labels.iloc[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a0d7bc54-1aab-468b-a866-1a3069047cc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepared_data = my_pipeline.transform(some_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "50c62343-fef4-4df6-b652-031ed2134710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12.91385188, 29.19866298],\n",
       "       [12.78216568, 29.03773361],\n",
       "       [12.56268868, 28.96620945],\n",
       "       [12.56268868, 29.1629009 ],\n",
       "       [12.73827028, 29.01985257],\n",
       "       [12.47489788, 28.8589232 ],\n",
       "       [ 8.96326589, 28.82316112],\n",
       "       [ 8.34873029, 29.18078194],\n",
       "       [ 8.34873029, 29.18078194],\n",
       "       [ 8.52431189, 29.18078194]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(prepared_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cf7f6f18-bf21-4828-908c-52db03844f3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[12.91385188, 29.21654402],\n",
       " [12.91385188, 29.21654402],\n",
       " [12.91385188, 29.21654402],\n",
       " [12.91385188, 29.21654402],\n",
       " [12.91385188, 29.21654402],\n",
       " [12.91385188, 29.21654402],\n",
       " [8.52431189, 29.21654402],\n",
       " [8.52431189, 29.21654402],\n",
       " [8.52431189, 29.21654402],\n",
       " [8.52431189, 29.21654402]]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "some_labels.values.tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f52ca3-8ae7-4b7a-b883-93153417da3e",
   "metadata": {},
   "source": [
    "## Evaluating the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9f5fdd0f-1625-451c-971a-e732a5fa6397",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "signal_predictions = model.predict(signal_num_tr)\n",
    "mse = mean_squared_error(signal_labels, signal_predictions)\n",
    "rmse = np.sqrt(mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "02efe577-fa57-44a7-8dbd-75e0b4aeaed8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4711059268956744"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c8aa5b97-25d3-46e5-861c-094ebcd1bd0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.22194079435623248"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mse"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d01d27-74e5-4e80-8c84-f8763efee1fc",
   "metadata": {},
   "source": [
    "## Function to Calculate Average Localisation Error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2720f2b5-0e4f-472c-9f84-60d5dc402c77",
   "metadata": {},
   "outputs": [],
   "source": [
    "def euclidean_distance(coord1, coord2):\n",
    "    return np.linalg.norm(coord1 - coord2)\n",
    "\n",
    "def average_localization_error(predicted_coords, ground_truth_coords):\n",
    "    errors = []\n",
    "    for pred_coord, gt_coord in zip(predicted_coords, ground_truth_coords):\n",
    "        error = euclidean_distance(pred_coord, gt_coord)\n",
    "        errors.append(error)\n",
    "    return np.mean(errors)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06c192f2-cabe-43c7-b5dd-287b3b58f69d",
   "metadata": {},
   "source": [
    "## Saving the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e25b1093-6b50-4c70-b8f3-0784f5dad212",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['RSS.joblib']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from joblib import dump, load\n",
    "dump(model, \"RSS.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbd91b61-a770-4230-968f-31f88593328c",
   "metadata": {},
   "source": [
    "## Testing the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c27b2a78-71cd-4642-9df6-66990f365594",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "strat_test_set = pd.read_excel(\"test.twentyfive.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "56b6431f-3c26-4e27-a5f5-e0b34646ccc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# strat_test_set = strat_test_set.drop(\"Label\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b5d64e81-0cff-4871-8e13-32b5e60b9841",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7392, 625)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strat_test_set.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c57c8780-2e94-4008-bc85-affe2b8f59d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Localization Error: 4.382758962586564\n",
      "RMSE:  0.4711059268956744\n"
     ]
    }
   ],
   "source": [
    "x_test = strat_test_set.drop(['x', 'y'], axis = 1) #dropping a column 'x' from testing data frame\n",
    "y_test = strat_test_set[['x', 'y']].copy() #selecting only column 'x' from testing data frame\n",
    "x_test_prepared = my_pipeline.transform(x_test)\n",
    "final_predictions = model.predict(x_test_prepared)\n",
    "final_mse = mean_squared_error(y_test, final_predictions)\n",
    "final_rmse = np.sqrt(mse)\n",
    "predicted_coords = final_predictions\n",
    "ground_truth_coords = y_test.values.tolist()\n",
    "avg_error = average_localization_error(predicted_coords, ground_truth_coords)\n",
    "print(\"Average Localization Error:\", avg_error)\n",
    "print(\"RMSE: \", final_rmse)\n",
    "# print(final_predictions, y_test.values.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14b99455-2310-4c17-bc0f-0463b5a86641",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
